"""
Helper functions to ease manipulation of site labels on cubic grids
"""

from numpy import *


def delta(d):
    '''Returns an array of all NN vectors for a hypercubic d-dimensional lattice,
    ordered (x,y,...,-x,-y,...)'''
    return vstack([identity(d,int),-identity(d,int)])


def neighbor(B,n=1):
    '''Returns all the sites lying within n lattice constants from the sites B, including the sites themselves.'''
    if not B:
        return set(B)
    if n == 1:
        d = len(list(B)[0])
        D = delta(d)
        B = sorted(B)
        N = set([tuple(x+y) for x in B for y in D])
        return N|set(B)
    elif n > 1:
        N = neighbor(B,n-1)
        return neighbor(N)|N
    else:
        return set(B)


def pairs(sites):
    '''Return a generator which yields pairs of nearest neighbor sites
    from the given list of sites.'''
    while sites:
        s = sites.pop()
        for t in sites:
            d = array(t,int)-array(s,int)
            if sum(abs(d))==1: yield s,t,d


def NNlist(B):
    '''Returns a list of all vectors adjacent to a list of sites B,
    excluding the sites themselves. 
    B is a list of boson occupied sites.'''
    d = len(B[0])
    D = delta(d)
    return array([x+y for x in B for y in D if all(sum(abs(x+y-B),axis=-1))])


def coNNlist(B):
    '''Returns a list of all vectors of orbiton sites
    corresponding to respective NNs generated by NNlist.
    B is a list of boson occupied sites.'''
    d = len(B[0])
    D = delta(d)
    return array([x for x in B for y in D if all(sum(abs(x+y-B),axis=-1))])
